package com.chabashilah.bluetooth_test;

import java.io.IOException;
import java.io.InputStream;
import java.util.Iterator;
import java.util.Set;
import java.util.UUID;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
//import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
//This is for HTTP transmission

//import com.chabashilah.bluetooth_test.R.id;

public class Bluetooth_testActivity extends Activity {
	public static final int MESSAGE_UPDATE_TEXT = 0;
	private static final String LOG_TAG ="[SENSOR MAIN ACTIVITY]";
	/* This UUID is for SSP*/
	private UUID uuid = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");
	private BluetoothDevice btDevice;
	private BluetoothSocket btSocket;
	private Thread mThread;
	private String mSendData = "";
	private ServerAPI sap = new ServerAPI("doumodoumo@gmail.com", "hogehoge");
	EditText mEditText;
   
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		//===================UI part===================
		Button button = (Button) findViewById(R.id.button);
		// ボタンがクリックされた時に呼び出されるコールバックリスナーを登録します
		button.setOnClickListener(new View.OnClickListener() {
			//@Override
			public void onClick(View v) {
				// ボタンがクリックされた時に呼び出されます
				//Button button = (Button) v;
				//Toast.makeText(Bluetooth_testActivity.this, "onClick()",
						//Toast.LENGTH_SHORT).show();
				
			}
		});
       
		mEditText = (EditText) findViewById(R.id.edittext);
		//==============================================
       
		Log.d(LOG_TAG, "Start onCreate");
		// Getting local Terminal BT adaptor
		BluetoothAdapter btAdapter = BluetoothAdapter.getDefaultAdapter();
		// Getting device list which is already paired.
		if(btAdapter == null){
			Log.d(LOG_TAG, "No default adapter is found");
			return;
		}
		Set<BluetoothDevice> btDeviceSet = btAdapter.getBondedDevices();
		if(btDeviceSet == null){
			Log.d(LOG_TAG, "No paired module is found");
			return;   	   
		}
		Iterator<BluetoothDevice> it = btDeviceSet.iterator();
		if(it == null){
			Log.d(LOG_TAG, "No iterator is gotten");
			return;   	   
		}	
		if(it.hasNext()){
			// In the meantime, first device is used.
			// However, this is not proper procedure.
			// I need to handle this part more carefully.
			// Write it later.
			btDevice = it.next();
			Log.d(LOG_TAG, "btAddr = " + btDevice.getAddress());
		}
		try {
			if(btDevice == null){
				Log.d(LOG_TAG, "No device is found");
				return;
			}
			// Create RFCOMM socket
			btSocket = btDevice.createRfcommSocketToServiceRecord(uuid);
			if(btSocket == null){
				Log.d(LOG_TAG, "No socket is found");
				return;
			}
			btSocket.connect();
			mThread = new Thread(new Runnable() {
				//@Override
				public void run() {
					try {
						// connectできればInputStream/OutputStreamで通信できる
						InputStream inStream = btSocket.getInputStream();
						Log.d(LOG_TAG, "Now reading from input stream");
						// Listening input stream
                       
                       while(true){
                    	   int retByte = inStream.read();
                    	   //String receivedRawData = Integer.toString(inStream.read());
                    	   //Log.d(LOG_TAG, receivedRawData);
                    	   char raw_data[] = {(char)(retByte)};
                    	   String res_string = new String(raw_data);
                    	   Log.d(LOG_TAG, res_string);
                    	   if (res_string.equals("#")) {
                    		   //mEditText.setText("test");
                    		   mHandler.obtainMessage(MESSAGE_UPDATE_TEXT, -1, -1).sendToTarget();
                    		   String [] split_data = mSendData.split(",");
                    		   sap.sendSensorData(split_data);
                    		   Log.d(LOG_TAG, "retData = " + mSendData);
                    		   //Initialization
                    		   mSendData = "";
                    	   }else{
                    		   mSendData = mSendData + res_string;
                    	   }
                    	   
                       }
                   } catch (IOException e) {
                       e.printStackTrace();
                   }
               }
           });
           
       } catch (IOException e) {
           e.printStackTrace();
       }
   }
   @Override
   public synchronized void onResume() {
	   super.onResume();
	   if(mThread == null){
		   Log.d(LOG_TAG, "[onResume]Receive thread doesn't work.");
		   return;
	   }
	   mThread.start();
	   Log.d(LOG_TAG, "[onResume]Thread function starts");
   }   
   
   @Override
   public synchronized void onPause() {
       super.onPause();
       Log.d(LOG_TAG, "[onPause] Start function.");
   }

   @Override
   public void onStop() {
       super.onStop();
       Log.d(LOG_TAG, "[onStop] Start function.");
   }
   
   @Override
   public void onDestroy() {
       super.onDestroy();
       Log.d(LOG_TAG, "[onDestory] Start function.");
       if(mThread == null){
    	   Log.d(LOG_TAG, "No thread is found.");
    	   return;
       }
       mThread.stop();
       try {
           btSocket.close();
       } catch (IOException e) {	
           e.printStackTrace();
       }       
       
   }
   
   
   private final Handler mHandler = new Handler() {
	   @Override
       public void handleMessage(Message msg) {
		   switch (msg.what) {
		   case MESSAGE_UPDATE_TEXT:
			   mEditText.setText(mSendData);
           }
	   }
   };
}



